plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id "org.jetbrains.kotlinx.kotlin-deeplearning-gradle-plugin" version "0.5.2"
    id("kotlin-kapt")
}

def kotlindl_version = "0.5.2"
def work_version = "2.9.1"
def room_version = "2.6.1"

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localProperties.load(new FileInputStream(localPropertiesFile))
}

def privateKey = localProperties.getProperty("GOOGLE_WALLET_PRIVATE_KEY") ?: ""

android {
    namespace 'com.example.seizureguard'
    compileSdk 35

    defaultConfig {
        buildConfigField "String", "PRIVATE_KEY", "\"${privateKey}\""

        applicationId "com.example.seizureguard"
        minSdk 26
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }
    buildFeatures {
        buildConfig true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.3'
    }
    packaging {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    // biometrics
    implementation "androidx.biometric:biometric:1.4.0-alpha02"
    implementation("androidx.security:security-state:1.0.0-alpha04")
    implementation("androidx.security:security-crypto-ktx:1.1.0-alpha03")

    // coil
    implementation "io.coil-kt:coil-compose:2.4.0"

    // Datastore (onboarding)
    implementation "androidx.datastore:datastore-preferences:1.1.1"

    // Kotlin DL dependencies (choose appropriate modules for your use case)
    implementation "org.jetbrains.kotlinx:kotlin-deeplearning-visualization:$kotlindl_version"
    implementation "org.jetbrains.kotlinx:kotlin-deeplearning-tensorflow:$kotlindl_version"

    // Onnx
    implementation 'com.microsoft.onnxruntime:onnxruntime-training-android:latest.release'  // full package

    // Android Core Libraries
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.8.6'
    implementation 'androidx.activity:activity-compose:1.9.2'
    implementation("androidx.compose.runtime:runtime-livedata:1.5.4")
    implementation("androidx.lifecycle:lifecycle-process:2.6.2")

    // Jetpack Compose
    implementation platform('androidx.compose:compose-bom:2024.02.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.activity:activity-compose:1.9.3'
    implementation 'androidx.navigation:navigation-compose:2.8.5'
    implementation 'androidx.compose.material3:material3:1.2.1'
    implementation 'androidx.compose.material3:material3-window-size-class:1.2.1'
    implementation 'com.google.accompanist:accompanist-flowlayout:0.30.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-compose:2.8.7'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.8.7'
    implementation("androidx.constraintlayout:constraintlayout:2.2.0")
    implementation("androidx.constraintlayout:constraintlayout-compose:1.1.0")
    implementation "androidx.compose.material:material-icons-extended:1.7.6"


    // Room database
    implementation("androidx.room:room-runtime:$room_version")
    implementation("androidx.room:room-ktx:$room_version")
    implementation 'com.google.firebase:firebase-crashlytics-buildtools:3.0.2'
    implementation 'com.google.android.gms:play-services-wallet:19.4.0'
    implementation 'androidx.appcompat:appcompat:1.7.0'
    annotationProcessor("androidx.room:room-compiler:$room_version")
    kapt("androidx.room:room-compiler:$room_version")
    implementation "com.google.code.gson:gson:2.8.9"

    // Unit Testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation "io.mockk:mockk:1.13.7"

    // Android Instrumentation Testing
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    androidTestImplementation platform('androidx.compose:compose-bom:2023.03.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'

    // Debugging
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'

    // Google Fonts
    implementation "androidx.compose.ui:ui-text-google-fonts:1.3.2"

    // coroutines
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.6.4")

    // Google wallet api
    implementation("com.google.android.gms:play-services-pay:16.3.0")
    implementation("com.google.wallet.button:compose-wallet-button:0.1.0-beta01")
    implementation('com.auth0:java-jwt:4.4.0')


    // retrofit
    implementation("com.squareup.retrofit2:retrofit:2.9.0")
    implementation("com.squareup.retrofit2:converter-gson:2.9.0")
    implementation("com.squareup.okhttp3:okhttp:4.9.3")
}

downloadKotlinDLModels {
    models = ["base_pat_02"]               // list of model type names to download
    sourceSet = "main"                     // optional name of the target source set ("main" by default)
    overwrite = false                      // optional parameter to overwrite existing files ("true" by default)
}